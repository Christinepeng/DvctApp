apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.apollographql.android'
apply plugin: "kotlin-allopen"

def keystorePropertiesFile = rootProject.file("../DivercityAppCredentials/keystore.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists())
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

allOpen {
    // allows mocking for classes w/o directly opening them for release builds
    annotation 'com.divercity.android.testing.OpenClass'
}

android {

    if (keystorePropertiesFile.exists()) {
        signingConfigs {
            config {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    } else {
        signingConfigs {
            config {
            }
        }
    }

    compileSdkVersion 28
    defaultConfig {
        applicationId "com.divercity.android"
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 17
        versionName "B-1.15"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas".toString())
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            buildConfigField "String", "BASE_URL", '"api.divercity.io"'
            manifestPlaceholders = [enableCrashReporting: "true", enableAnalytics: "true"]
            signingConfig signingConfigs.config
        }

        debug {
            minifyEnabled false
            debuggable true
            manifestPlaceholders = [enableCrashReporting: "false", enableAnalytics: "false"]
//            buildConfigField "String", "BASE_URL", '"api.divercity.io"'
            buildConfigField "String", "BASE_URL", '"dev-api.divercity.io"'
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig getSigningConfig()
        }

        applicationVariants.all { variant ->
            variant.outputs.all { output ->
                outputFileName = "Divercity" + "_" + "${variant.name}-${variant.versionName}-${variant.versionCode}.apk"
            }
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    androidExtensions {
        experimental = true
    }
}

dependencies {

    def supportLibrary_version = '1.0.0'

    def appcompat_version = '1.0.2'

    def constraintLayout_version = '1.1.3'

    def facebook_login_version = "[5,6)"

    def paging_version = '2.1.0'

    def retrofit_version = "2.5.0"
    def okhttp3_version = "3.9.1"
    def rxjava_version = "2.2.4"
    def rxandroid_version = "2.1.1"

    def glide_version = "4.9.0"
    def lifecycle_version = '2.2.0-alpha02'
//    def dagger_version = "2.22.1"
    def dagger_version = "2.23.2"

//
    def timber_version = "4.7.1"

    def leakCanary_version = "1.6.2"

    def kotlinCoroutines_version = "1.1.1"

    def room_version_runtime = '2.1.0'
    def room_version = '2.1.0-alpha04'

    def firebase_messaging_version = "19.0.1"
    def firebase_core_version = "17.0.1"
    def crashlytics_version = "2.10.1"

    def spyglass_version = "2.0.0"

    def tagview_version = "1.1.7"

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.multidex:multidex:2.0.1'

    compileOnly 'javax.annotation:jsr250-api:1.0'

    // Firebase
    implementation "com.google.firebase:firebase-core:$firebase_core_version"
    implementation "com.google.firebase:firebase-messaging:$firebase_messaging_version"
    implementation "com.crashlytics.sdk.android:crashlytics:$crashlytics_version"

    // Android support
    implementation "androidx.legacy:legacy-support-v4:$supportLibrary_version"
    implementation "androidx.appcompat:appcompat:$appcompat_version"
    implementation "androidx.cardview:cardview:$supportLibrary_version"
    implementation "com.google.android.material:material:$supportLibrary_version"
    implementation "androidx.constraintlayout:constraintlayout:$constraintLayout_version"

    // Glide
    implementation "com.github.bumptech.glide:glide:$glide_version"
    kapt "com.github.bumptech.glide:compiler:$glide_version"

    // Facebook login
    implementation "com.facebook.android:facebook-login:[5,6)"

    // Google login
    implementation 'com.google.android.gms:play-services-auth:17.0.0'

    // Arch components
    implementation "androidx.paging:paging-runtime:$paging_version"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:$lifecycle_version"

    // Retrofit & OkHttp
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttp3_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-scalars:$retrofit_version"

    // RxJava
    implementation "io.reactivex.rxjava2:rxandroid:$rxandroid_version"
    implementation "io.reactivex.rxjava2:rxjava:$rxjava_version"

    // Dagger2
    implementation "com.google.dagger:dagger-android:$dagger_version"
    implementation "com.google.dagger:dagger-android-support:$dagger_version"
    implementation "com.google.dagger:dagger:$dagger_version"
    kapt "com.google.dagger:dagger-compiler:$dagger_version"
    kapt "com.google.dagger:dagger-android-processor:$dagger_version"

    // BottomNavigationView
    implementation 'com.github.ittianyu:BottomNavigationViewEx:2.0.2'
    implementation 'q.rorbin:badgeview:1.1.0'

    // Timber
    implementation "com.jakewharton.timber:timber:$timber_version"

    implementation 'com.github.jkwiecien:EasyImage:2.1.0'

    // LeakCanary
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakCanary_version"
    releaseImplementation "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanary_version"
    debugImplementation "com.squareup.leakcanary:leakcanary-support-fragment:$leakCanary_version"

    // Apollo
    implementation 'com.apollographql.apollo:apollo-runtime:1.2.2'
    compileOnly 'org.jetbrains:annotations:13.0'
    testCompileOnly 'org.jetbrains:annotations:13.0'

    // Kotlin Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlinCoroutines_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinCoroutines_version"

    // Room
    implementation "androidx.room:room-runtime:$room_version_runtime"
    implementation "androidx.room:room-coroutines:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // Paginate
    implementation 'com.github.markomilos:paginate:0.5.1'

    implementation "com.linkedin.android.spyglass:spyglass:$spyglass_version"

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation 'net.yslibrary.keyboardvisibilityevent:keyboardvisibilityevent:2.3.0'

    implementation "co.lujun:androidtagview:$tagview_version"

    implementation 'io.branch.sdk.android:library:3.1.0'

//    implementation 'com.wajahatkarim3.EasyFlipView:EasyFlipView:2.1.2'

    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    def mockito_all_version = "1.10.19"
    def mockito_android_version = "2.25.0"
    def mockito_version = "2.25.0"
    def junit_version = "4.12"
    def arch_core_version = "2.0.1"

    // Testing


    // Unit Testing
    testImplementation "junit:junit:$junit_version"
    testImplementation "org.mockito:mockito-core:$mockito_version"
    testImplementation "androidx.arch.core:core-runtime:$arch_core_version"
    testImplementation "androidx.arch.core:core-testing:$arch_core_version"

    //    testImplementation "org.mockito:mockito-all:$mockito_all_version"
//    testImplementation "org.mockito:mockito-android:$mockito_android_version"
}

repositories {
    mavenCentral()
    maven { url 'https://maven.fabric.io/public' }
}

apply plugin: 'com.google.gms.google-services'